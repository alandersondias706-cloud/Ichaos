<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>iChaos [Powered by Triztorming]</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            padding: 0;
            background-color: #f4f7f6;
            color: #333;
            line-height: 1.6;
        }
        .container {
            max-width: 900px;
            margin: 30px auto;
            background-color: #fff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 25px;
        }
        h1 {
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #555;
        }
        input[type="text"], select {
            width: calc(100% - 20px);
            padding: 12px;
            margin-bottom: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 1rem;
            box-sizing: border-box;
        }
        select {
            height: 150px;
            overflow-y: auto;
            appearance: none; /* Remove default arrow on some browsers */
            background: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23000%22%20d%3D%22M287%2069.9a14.6%2014.6%200%200%200-20.7%200L146.2%20190.5%2026.1%2069.9A14.6%2014.6%200%200%200%205.4%2090.6l120.7%20120.7a14.6%2014.6%200%200%200%2020.7%200L287%2090.6a14.6%2014.6%200%200%200%200-20.7z%22%2F%3E%3C%2Fsvg%3E') no-repeat right 12px center;
            background-size: 12px;
            background-color: #fff;
            border: 1px solid #ddd;
        }
        select option {
            padding: 8px 10px;
        }
        select option:checked {
            background-color: #e6f7ff;
            color: #000;
        }
        button {
            background-color: #3498db;
            color: white;
            padding: 15px 25px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1.1rem;
            font-weight: bold;
            display: block;
            width: 100%;
            margin-top: 20px;
            transition: background-color 0.3s ease;
        }
        button:hover {
            background-color: #2980b9;
        }
        #results {
            margin-top: 40px;
            padding: 25px;
            background-color: #e8f5e9;
            border-radius: 8px;
            border: 1px solid #d4edda;
            display: none; /* Hidden by default */
        }
        #results h3 {
            color: #28a745;
            margin-bottom: 15px;
            border-bottom: 1px dashed #a3e6b2;
            padding-bottom: 10px;
        }
        #results p {
            margin-bottom: 10px;
            color: #333;
        }
        #results strong {
            color: #007bff;
        }
        .loading {
            text-align: center;
            margin-top: 20px;
            font-style: italic;
            color: #666;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>iChaos <span style="font-size: 0.7em; color: #7f8c8d;">[Powered by Triztorming]</span></h1>
        <p style="text-align: center; margin-bottom: 30px; font-style: italic; color: #666;">"Os Futuros serão, mera e estranhamente, uma combinação caótica de Presentes e Passados."</p>

        <label for="targetInput">Alvo (tema de análise):</label>
        <input type="text" id="targetInput" placeholder="Ex: O futuro do trabalho remoto">

        <label for="windowsSelect">Selecione 2 ou mais janelas da matriz 9W:</label>
        <select id="windowsSelect" multiple size="9">
            <option value="1">1 - Alvo Atual</option>
            <option value="2">2 - Partes Atuais</option>
            <option value="3">3 - Contexto Atual</option>
            <option value="4">4 - Alvo no Passado</option>
            <option value="5">5 - Partes no Passado</option>
            <option value="6">6 - Contexto Passado</option>
            <option value="7">7 - Alvo no Futuro</option>
            <option value="8">8 - Partes Futuras</option>
            <option value="9">9 - Contexto Futuro</option>
        </select>

        <button id="mixWindowsBtn">Misturar Janelas (iChaos)</button>

        <div class="loading" id="loadingMessage">Processando iChaos... Aguarde.</div>

        <div id="results">
            <h3>Resultados do iChaos</h3>
            <p><strong>Janelas Originais Selecionadas:</strong></p>
            <div id="originalWindowsContent"></div>
            <hr>
            <p><strong>Semente Híbrida:</strong></p>
            <p id="hybridSeed"></p>
            <hr>
            <p><strong>Tipo de Caos Aplicado:</strong></p>
            <p id="chaosType"></p>
            <hr>
            <p><strong>Insight Final (iRaP):</strong></p>
            <p id="finalInsight"></p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const targetInput = document.getElementById('targetInput');
            const windowsSelect = document.getElementById('windowsSelect');
            const mixWindowsBtn = document.getElementById('mixWindowsBtn');
            const resultsDiv = document.getElementById('results');
            const originalWindowsContent = document.getElementById('originalWindowsContent');
            const hybridSeed = document.getElementById('hybridSeed');
            const chaosType = document.getElementById('chaosType');
            const finalInsight = document.getElementById('finalInsight');
            const loadingMessage = document.getElementById('loadingMessage');

            const windowDescriptions = {
                '1': 'Alvo Atual: Descreve o tema principal no cenário presente.',
                '2': 'Partes Atuais: Componentes e elementos que compõem o alvo no presente.',
                '3': 'Contexto Atual: O ambiente e as condições que cercam o alvo hoje.',
                '4': 'Alvo no Passado: Como o tema se manifestava e era percebido historicamente.',
                '5': 'Partes no Passado: Componentes e elementos do alvo em seu estado anterior.',
                '6': 'Contexto Passado: O ambiente e as condições que cercavam o alvo no passado.',
                '7': 'Alvo no Futuro: Projeções e possibilidades para o tema principal.',
                '8': 'Partes Futuras: Componentes e elementos que podem emergir ou se transformar no futuro.',
                '9': 'Contexto Futuro: O ambiente e as condições prováveis que cercarão o alvo no futuro.'
            };

            const chaosTypes = {
                'Anacronia': 'Insere eventos fora de época para gerar conexão criativa.',
                'Fractal': 'Replica padrões em escalas diferentes.',
                'Baralhamento': 'Muda ordens/processos de forma controlada.',
                'Buraco Negro': 'Omite propositalmente uma parte para forçar dedução criativa.'
            };

            mixWindowsBtn.addEventListener('click', async () => {
                const target = targetInput.value.trim();
                const selectedOptions = Array.from(windowsSelect.selectedOptions);

                if (!target) {
                    alert('Por favor, insira um "Alvo" para análise.');
                    return;
                }

                if (selectedOptions.length < 2) {
                    alert('Por favor, selecione 2 ou mais janelas da matriz 9W.');
                    return;
                }

                loadingMessage.style.display = 'block';
                resultsDiv.style.display = 'none'; // Hide previous results

                const selectedWindowValues = selectedOptions.map(option => option.value);
                const selectedWindowNames = selectedOptions.map(option => option.textContent);

                // Simulate AI processing
                await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API call delay

                // --- SIMULAÇÃO DA LÓGICA DE IA ---
                // 1. Gerar os textos originais das janelas selecionadas
                let originalTexts = selectedWindowValues.map(value => {
                    return `(${windowDescriptions[value].split(':')[0].trim()}) - Simulação para "${target}": ${generatePlaceholderText(value, target)}`;
                });
                originalWindowsContent.innerHTML = originalTexts.map(text => `<p>${text}</p>`).join('');

                // 2. Fundir esses textos num conceito único: a semente híbrida
                // Em um cenário real, a IA criaria uma síntese mais complexa.
                const simulatedHybridSeed = `A semente híbrida, para o alvo "${target}" a partir das janelas selecionadas (${selectedWindowNames.join(', ')}), emerge como uma fusão de conceitos sobre ${target} em suas diversas dimensões temporais e contextuais. Ela representa um ponto de partida para a disrupção criativa, unindo ${originalTexts.slice(0, 2).join(', ').toLowerCase()} e outros elementos para formar uma nova perspectiva.`;
                hybridSeed.textContent = simulatedHybridSeed;

                // 3. Aplicar iRaP (Insight Radical por Atrito e Padrão)
                // Em um cenário real, a IA aplicaria a lógica iRaP.
                const simulatedIRaP = `Através do atrito entre ${selectedWindowNames[0].toLowerCase()} e ${selectedWindowNames[1].toLowerCase()}, e a identificação de padrões emergentes, o iRaP revela que "${generateIRaPInsight(target, selectedWindowValues)}" Este insight sugere uma nova abordagem para entender e intervir no desafio do ${target}.`;

                // 4. Inserir um tipo de caos aleatório
                const randomChaosKey = Object.keys(chaosTypes)[Math.floor(Math.random() * Object.keys(chaosTypes).length)];
                const selectedChaosDescription = chaosTypes[randomChaosKey];
                chaosType.textContent = `${randomChaosKey}: ${selectedChaosDescription}`;

                // 5. Gerar a resposta final baseada nessa lógica caótica e inovadora
                // A resposta final combinaria a semente híbrida, iRaP e o caos.
                const finalSimulatedInsight = `Com base na semente híbrida e no insight iRaP, aplicando o caos de ${randomChaosKey}, o cenário para "${target}" se transforma em: "${generateFinalInsight(target, randomChaosKey, selectedWindowValues)}" Isso desafia percepções convencionais e abre caminho para soluções radicais.`;
                finalInsight.textContent = finalSimulatedInsight;

                // --- FIM DA SIMULAÇÃO DA LÓGICA DE IA ---

                loadingMessage.style.display = 'none';
                resultsDiv.style.display = 'block';
            });

            // Helper function to generate placeholder text for windows based on target
            function generatePlaceholderText(windowValue, target) {
                switch(windowValue) {
                    case '1': return `O ${target} hoje é caracterizado por...`;
                    case '2': return `As partes do ${target} atualmente incluem...`;
                    case '3': return `O contexto atual do ${target} é marcado por...`;
                    case '4': return `No passado, o ${target} era visto como...`;
                    case '5': return `Partes do ${target} no passado eram...`;
                    case '6': return `O contexto histórico do ${target} envolvia...`;
                    case '7': return `Futuramente, o ${target} pode se transformar em...`;
                    case '8': return `Novas partes para o ${target} no futuro podem ser...`;
                    case '9': return `O contexto futuro do ${target} será influenciado por...`;
                    default: return '';
                }
            }

            // Helper function to generate a more specific iRaP insight
            function generateIRaPInsight(target, selectedWindows) {
                const windowMapping = {
                    '1': 'presença', '2': 'estrutura', '3': 'ambiente',
                    '4': 'história', '5': 'evolução', '6': 'legado',
                    '7': 'futuro', '8': 'potencial', '9': 'horizonte'
                };
                const mappedWindows = selectedWindows.map(w => windowMapping[w]).join(' e ');
                return `A essência do ${target} reside na inesperada conexão entre sua ${mappedWindows}, revelando um padrão disruptivo de...`;
            }

            // Helper function to generate a final insight with chaos
            function generateFinalInsight(target, chaosType, selectedWindows) {
                const windowNamesForInsight = selectedWindows.map(val => windowsSelect.options[parseInt(val)-1].text.replace(/^\d+\s-\s/, ''));
                let insight = `Para o ${target}, o caos de ${chaosType} sugere que...`;

                switch (chaosType) {
                    case 'Anacronia':
                        insight += ` eventos do "passado distante" (${windowNamesForInsight.includes('Alvo no Passado') ? 'revisitando o Alvo no Passado' : 'um momento inesperado na linha do tempo'}) se manifestam no "futuro próximo", criando uma disrupção na evolução do ${target}, talvez trazendo de volta conceitos esquecidos ou acelerando tendências ainda incipientes.`;
                        break;
                    case 'Fractal':
                        insight += ` padrões observados nas "partes atuais" do ${target} (como ${windowNamesForInsight.includes('Partes Atuais') ? 'Partes Atuais' : 'um micro-elemento'}) se replicam em uma escala macro no "contexto futuro" do ${target}, indicando que pequenas interações hoje podem escalar para transformações globais amanhã.`;
                        break;
                    case 'Baralhamento':
                        insight += ` a ordem convencional das "etapas de desenvolvimento" do ${target} (talvez sua ${windowNamesForInsight.includes('Alvo no Passado') ? 'história' : ''} com seu ${windowNamesForInsight.includes('Alvo no Futuro') ? 'futuro' : ''}) é intencionalmente embaralhada, forçando uma reavaliação de premissas e métodos, criando caminhos não lineares para a inovação.`;
                        break;
                    case 'Buraco Negro':
                        insight += ` a omissão estratégica da "função central" ou de uma "parte fundamental" do ${target} (por exemplo, ${windowNamesForInsight.includes('Partes Atuais') ? 'uma Parte Atual' : 'um pilar do sistema'}) força a dedução criativa e a busca por soluções alternativas inesperadas, revelando novas estruturas ou dependências ocultas.`;
                        break;
                }
                return insight;
            }

            // Placeholder for actual AI API call (e.g., Gemini or OpenAI)
            async function callAIModel(prompt) {
                // In a real application, you would replace this with your actual API key and endpoint
                // const API_KEY = 'YOUR_GEMINI_API_KEY'; // Or OpenAI API Key
                // const API_ENDPOINT = 'YOUR_GEMINI_API_ENDPOINT'; // Or OpenAI API Endpoint

                // Example using a hypothetical Gemini API structure (concept only)
                /*
                try {
                    const response = await fetch(API_ENDPOINT, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${API_KEY}` // For OpenAI
                            // Or for Gemini, check their specific authentication
                        },
                        body: JSON.stringify({
                            // Your specific request payload for the AI model
                            prompt: prompt,
                            max_tokens: 500
                        })
                    });
                    const data = await response.json();
                    // Process data. For Gemini, it might be data.candidates[0].content.parts[0].text
                    // For OpenAI, it might be data.choices[0].text
                    return data.choices[0].text; // Example for OpenAI
                } catch (error) {
                    console.error('Error calling AI model:', error);
                    return 'Erro ao gerar conteúdo com a IA. Por favor, tente novamente.';
                }
                */
                // For now, we return a simulated response:
                return `Simulação de resposta da IA para: "${prompt}"`;
            }
        });
    </script>
</body>
</html>